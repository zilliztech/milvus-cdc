// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zilliztech/milvus-cdc/core/model"
)

// TargetAPI is an autogenerated mock type for the TargetAPI type
type TargetAPI struct {
	mock.Mock
}

type TargetAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *TargetAPI) EXPECT() *TargetAPI_Expecter {
	return &TargetAPI_Expecter{mock: &_m.Mock}
}

// GetCollectionInfo provides a mock function with given fields: ctx, collectionName
func (_m *TargetAPI) GetCollectionInfo(ctx context.Context, collectionName string) (*model.CollectionInfo, error) {
	ret := _m.Called(ctx, collectionName)

	var r0 *model.CollectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.CollectionInfo, error)); ok {
		return rf(ctx, collectionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.CollectionInfo); ok {
		r0 = rf(ctx, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CollectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetAPI_GetCollectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionInfo'
type TargetAPI_GetCollectionInfo_Call struct {
	*mock.Call
}

// GetCollectionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
func (_e *TargetAPI_Expecter) GetCollectionInfo(ctx interface{}, collectionName interface{}) *TargetAPI_GetCollectionInfo_Call {
	return &TargetAPI_GetCollectionInfo_Call{Call: _e.mock.On("GetCollectionInfo", ctx, collectionName)}
}

func (_c *TargetAPI_GetCollectionInfo_Call) Run(run func(ctx context.Context, collectionName string)) *TargetAPI_GetCollectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TargetAPI_GetCollectionInfo_Call) Return(_a0 *model.CollectionInfo, _a1 error) *TargetAPI_GetCollectionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetAPI_GetCollectionInfo_Call) RunAndReturn(run func(context.Context, string) (*model.CollectionInfo, error)) *TargetAPI_GetCollectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartitionInfo provides a mock function with given fields: ctx, collectionName
func (_m *TargetAPI) GetPartitionInfo(ctx context.Context, collectionName string) (*model.CollectionInfo, error) {
	ret := _m.Called(ctx, collectionName)

	var r0 *model.CollectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.CollectionInfo, error)); ok {
		return rf(ctx, collectionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.CollectionInfo); ok {
		r0 = rf(ctx, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CollectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetAPI_GetPartitionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartitionInfo'
type TargetAPI_GetPartitionInfo_Call struct {
	*mock.Call
}

// GetPartitionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
func (_e *TargetAPI_Expecter) GetPartitionInfo(ctx interface{}, collectionName interface{}) *TargetAPI_GetPartitionInfo_Call {
	return &TargetAPI_GetPartitionInfo_Call{Call: _e.mock.On("GetPartitionInfo", ctx, collectionName)}
}

func (_c *TargetAPI_GetPartitionInfo_Call) Run(run func(ctx context.Context, collectionName string)) *TargetAPI_GetPartitionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TargetAPI_GetPartitionInfo_Call) Return(_a0 *model.CollectionInfo, _a1 error) *TargetAPI_GetPartitionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetAPI_GetPartitionInfo_Call) RunAndReturn(run func(context.Context, string) (*model.CollectionInfo, error)) *TargetAPI_GetPartitionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewTargetAPI creates a new instance of TargetAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTargetAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *TargetAPI {
	mock := &TargetAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
