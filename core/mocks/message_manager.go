// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	api "github.com/zilliztech/milvus-cdc/core/api"
)

// MessageManager is an autogenerated mock type for the MessageManager type
type MessageManager struct {
	mock.Mock
}

type MessageManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageManager) EXPECT() *MessageManager_Expecter {
	return &MessageManager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: channelName
func (_m *MessageManager) Close(channelName string) {
	_m.Called(channelName)
}

// MessageManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MessageManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - channelName string
func (_e *MessageManager_Expecter) Close(channelName interface{}) *MessageManager_Close_Call {
	return &MessageManager_Close_Call{Call: _e.mock.On("Close", channelName)}
}

func (_c *MessageManager_Close_Call) Run(run func(channelName string)) *MessageManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MessageManager_Close_Call) Return() *MessageManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageManager_Close_Call) RunAndReturn(run func(string)) *MessageManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateMessage provides a mock function with given fields: message
func (_m *MessageManager) ReplicateMessage(message *api.ReplicateMessage) {
	_m.Called(message)
}

// MessageManager_ReplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateMessage'
type MessageManager_ReplicateMessage_Call struct {
	*mock.Call
}

// ReplicateMessage is a helper method to define mock.On call
//   - message *api.ReplicateMessage
func (_e *MessageManager_Expecter) ReplicateMessage(message interface{}) *MessageManager_ReplicateMessage_Call {
	return &MessageManager_ReplicateMessage_Call{Call: _e.mock.On("ReplicateMessage", message)}
}

func (_c *MessageManager_ReplicateMessage_Call) Run(run func(message *api.ReplicateMessage)) *MessageManager_ReplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.ReplicateMessage))
	})
	return _c
}

func (_c *MessageManager_ReplicateMessage_Call) Return() *MessageManager_ReplicateMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageManager_ReplicateMessage_Call) RunAndReturn(run func(*api.ReplicateMessage)) *MessageManager_ReplicateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageManager creates a new instance of MessageManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageManager {
	mock := &MessageManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
