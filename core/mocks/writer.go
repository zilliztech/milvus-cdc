// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zilliztech/milvus-cdc/core/api"

	mock "github.com/stretchr/testify/mock"

	msgstream "github.com/milvus-io/milvus/pkg/mq/msgstream"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

type Writer_Expecter struct {
	mock *mock.Mock
}

func (_m *Writer) EXPECT() *Writer_Expecter {
	return &Writer_Expecter{mock: &_m.Mock}
}

// HandleOpMessagePack provides a mock function with given fields: ctx, msgPack
func (_m *Writer) HandleOpMessagePack(ctx context.Context, msgPack *msgstream.MsgPack) ([]byte, error) {
	ret := _m.Called(ctx, msgPack)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *msgstream.MsgPack) ([]byte, error)); ok {
		return rf(ctx, msgPack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *msgstream.MsgPack) []byte); ok {
		r0 = rf(ctx, msgPack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *msgstream.MsgPack) error); ok {
		r1 = rf(ctx, msgPack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Writer_HandleOpMessagePack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleOpMessagePack'
type Writer_HandleOpMessagePack_Call struct {
	*mock.Call
}

// HandleOpMessagePack is a helper method to define mock.On call
//  - ctx context.Context
//  - msgPack *msgstream.MsgPack
func (_e *Writer_Expecter) HandleOpMessagePack(ctx interface{}, msgPack interface{}) *Writer_HandleOpMessagePack_Call {
	return &Writer_HandleOpMessagePack_Call{Call: _e.mock.On("HandleOpMessagePack", ctx, msgPack)}
}

func (_c *Writer_HandleOpMessagePack_Call) Run(run func(ctx context.Context, msgPack *msgstream.MsgPack)) *Writer_HandleOpMessagePack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*msgstream.MsgPack))
	})
	return _c
}

func (_c *Writer_HandleOpMessagePack_Call) Return(_a0 []byte, _a1 error) *Writer_HandleOpMessagePack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Writer_HandleOpMessagePack_Call) RunAndReturn(run func(context.Context, *msgstream.MsgPack) ([]byte, error)) *Writer_HandleOpMessagePack_Call {
	_c.Call.Return(run)
	return _c
}

// HandleReplicateAPIEvent provides a mock function with given fields: ctx, apiEvent
func (_m *Writer) HandleReplicateAPIEvent(ctx context.Context, apiEvent *api.ReplicateAPIEvent) error {
	ret := _m.Called(ctx, apiEvent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReplicateAPIEvent) error); ok {
		r0 = rf(ctx, apiEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Writer_HandleReplicateAPIEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleReplicateAPIEvent'
type Writer_HandleReplicateAPIEvent_Call struct {
	*mock.Call
}

// HandleReplicateAPIEvent is a helper method to define mock.On call
//  - ctx context.Context
//  - apiEvent *api.ReplicateAPIEvent
func (_e *Writer_Expecter) HandleReplicateAPIEvent(ctx interface{}, apiEvent interface{}) *Writer_HandleReplicateAPIEvent_Call {
	return &Writer_HandleReplicateAPIEvent_Call{Call: _e.mock.On("HandleReplicateAPIEvent", ctx, apiEvent)}
}

func (_c *Writer_HandleReplicateAPIEvent_Call) Run(run func(ctx context.Context, apiEvent *api.ReplicateAPIEvent)) *Writer_HandleReplicateAPIEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReplicateAPIEvent))
	})
	return _c
}

func (_c *Writer_HandleReplicateAPIEvent_Call) Return(_a0 error) *Writer_HandleReplicateAPIEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Writer_HandleReplicateAPIEvent_Call) RunAndReturn(run func(context.Context, *api.ReplicateAPIEvent) error) *Writer_HandleReplicateAPIEvent_Call {
	_c.Call.Return(run)
	return _c
}

// HandleReplicateMessage provides a mock function with given fields: ctx, channelName, msgPack
func (_m *Writer) HandleReplicateMessage(ctx context.Context, channelName string, msgPack *msgstream.MsgPack) ([]byte, []byte, error) {
	ret := _m.Called(ctx, channelName, msgPack)

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *msgstream.MsgPack) ([]byte, []byte, error)); ok {
		return rf(ctx, channelName, msgPack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *msgstream.MsgPack) []byte); ok {
		r0 = rf(ctx, channelName, msgPack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *msgstream.MsgPack) []byte); ok {
		r1 = rf(ctx, channelName, msgPack)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *msgstream.MsgPack) error); ok {
		r2 = rf(ctx, channelName, msgPack)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Writer_HandleReplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleReplicateMessage'
type Writer_HandleReplicateMessage_Call struct {
	*mock.Call
}

// HandleReplicateMessage is a helper method to define mock.On call
//  - ctx context.Context
//  - channelName string
//  - msgPack *msgstream.MsgPack
func (_e *Writer_Expecter) HandleReplicateMessage(ctx interface{}, channelName interface{}, msgPack interface{}) *Writer_HandleReplicateMessage_Call {
	return &Writer_HandleReplicateMessage_Call{Call: _e.mock.On("HandleReplicateMessage", ctx, channelName, msgPack)}
}

func (_c *Writer_HandleReplicateMessage_Call) Run(run func(ctx context.Context, channelName string, msgPack *msgstream.MsgPack)) *Writer_HandleReplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*msgstream.MsgPack))
	})
	return _c
}

func (_c *Writer_HandleReplicateMessage_Call) Return(_a0 []byte, _a1 []byte, _a2 error) *Writer_HandleReplicateMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Writer_HandleReplicateMessage_Call) RunAndReturn(run func(context.Context, string, *msgstream.MsgPack) ([]byte, []byte, error)) *Writer_HandleReplicateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
