// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zilliztech/milvus-cdc/core/api"

	mock "github.com/stretchr/testify/mock"

	model "github.com/zilliztech/milvus-cdc/core/model"

	pb "github.com/zilliztech/milvus-cdc/core/pb"
)

// MetaOp is an autogenerated mock type for the MetaOp type
type MetaOp struct {
	mock.Mock
}

type MetaOp_Expecter struct {
	mock *mock.Mock
}

func (_m *MetaOp) EXPECT() *MetaOp_Expecter {
	return &MetaOp_Expecter{mock: &_m.Mock}
}

// GetAllCollection provides a mock function with given fields: ctx, filter
func (_m *MetaOp) GetAllCollection(ctx context.Context, filter api.CollectionFilter) ([]*pb.CollectionInfo, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*pb.CollectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.CollectionFilter) ([]*pb.CollectionInfo, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.CollectionFilter) []*pb.CollectionInfo); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.CollectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.CollectionFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaOp_GetAllCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCollection'
type MetaOp_GetAllCollection_Call struct {
	*mock.Call
}

// GetAllCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - filter api.CollectionFilter
func (_e *MetaOp_Expecter) GetAllCollection(ctx interface{}, filter interface{}) *MetaOp_GetAllCollection_Call {
	return &MetaOp_GetAllCollection_Call{Call: _e.mock.On("GetAllCollection", ctx, filter)}
}

func (_c *MetaOp_GetAllCollection_Call) Run(run func(ctx context.Context, filter api.CollectionFilter)) *MetaOp_GetAllCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.CollectionFilter))
	})
	return _c
}

func (_c *MetaOp_GetAllCollection_Call) Return(_a0 []*pb.CollectionInfo, _a1 error) *MetaOp_GetAllCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaOp_GetAllCollection_Call) RunAndReturn(run func(context.Context, api.CollectionFilter) ([]*pb.CollectionInfo, error)) *MetaOp_GetAllCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDroppedObj provides a mock function with given fields:
func (_m *MetaOp) GetAllDroppedObj() map[string]map[string]uint64 {
	ret := _m.Called()

	var r0 map[string]map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]uint64)
		}
	}

	return r0
}

// MetaOp_GetAllDroppedObj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDroppedObj'
type MetaOp_GetAllDroppedObj_Call struct {
	*mock.Call
}

// GetAllDroppedObj is a helper method to define mock.On call
func (_e *MetaOp_Expecter) GetAllDroppedObj() *MetaOp_GetAllDroppedObj_Call {
	return &MetaOp_GetAllDroppedObj_Call{Call: _e.mock.On("GetAllDroppedObj")}
}

func (_c *MetaOp_GetAllDroppedObj_Call) Run(run func()) *MetaOp_GetAllDroppedObj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaOp_GetAllDroppedObj_Call) Return(_a0 map[string]map[string]uint64) *MetaOp_GetAllDroppedObj_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaOp_GetAllDroppedObj_Call) RunAndReturn(run func() map[string]map[string]uint64) *MetaOp_GetAllDroppedObj_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPartition provides a mock function with given fields: ctx, filter
func (_m *MetaOp) GetAllPartition(ctx context.Context, filter api.PartitionFilter) ([]*pb.PartitionInfo, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*pb.PartitionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.PartitionFilter) ([]*pb.PartitionInfo, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.PartitionFilter) []*pb.PartitionInfo); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.PartitionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.PartitionFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaOp_GetAllPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPartition'
type MetaOp_GetAllPartition_Call struct {
	*mock.Call
}

// GetAllPartition is a helper method to define mock.On call
//  - ctx context.Context
//  - filter api.PartitionFilter
func (_e *MetaOp_Expecter) GetAllPartition(ctx interface{}, filter interface{}) *MetaOp_GetAllPartition_Call {
	return &MetaOp_GetAllPartition_Call{Call: _e.mock.On("GetAllPartition", ctx, filter)}
}

func (_c *MetaOp_GetAllPartition_Call) Run(run func(ctx context.Context, filter api.PartitionFilter)) *MetaOp_GetAllPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.PartitionFilter))
	})
	return _c
}

func (_c *MetaOp_GetAllPartition_Call) Return(_a0 []*pb.PartitionInfo, _a1 error) *MetaOp_GetAllPartition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaOp_GetAllPartition_Call) RunAndReturn(run func(context.Context, api.PartitionFilter) ([]*pb.PartitionInfo, error)) *MetaOp_GetAllPartition_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollectionNameByID provides a mock function with given fields: ctx, id
func (_m *MetaOp) GetCollectionNameByID(ctx context.Context, id int64) string {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MetaOp_GetCollectionNameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionNameByID'
type MetaOp_GetCollectionNameByID_Call struct {
	*mock.Call
}

// GetCollectionNameByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *MetaOp_Expecter) GetCollectionNameByID(ctx interface{}, id interface{}) *MetaOp_GetCollectionNameByID_Call {
	return &MetaOp_GetCollectionNameByID_Call{Call: _e.mock.On("GetCollectionNameByID", ctx, id)}
}

func (_c *MetaOp_GetCollectionNameByID_Call) Run(run func(ctx context.Context, id int64)) *MetaOp_GetCollectionNameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MetaOp_GetCollectionNameByID_Call) Return(_a0 string) *MetaOp_GetCollectionNameByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaOp_GetCollectionNameByID_Call) RunAndReturn(run func(context.Context, int64) string) *MetaOp_GetCollectionNameByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInfoForCollection provides a mock function with given fields: ctx, id
func (_m *MetaOp) GetDatabaseInfoForCollection(ctx context.Context, id int64) model.DatabaseInfo {
	ret := _m.Called(ctx, id)

	var r0 model.DatabaseInfo
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.DatabaseInfo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.DatabaseInfo)
	}

	return r0
}

// MetaOp_GetDatabaseInfoForCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInfoForCollection'
type MetaOp_GetDatabaseInfoForCollection_Call struct {
	*mock.Call
}

// GetDatabaseInfoForCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *MetaOp_Expecter) GetDatabaseInfoForCollection(ctx interface{}, id interface{}) *MetaOp_GetDatabaseInfoForCollection_Call {
	return &MetaOp_GetDatabaseInfoForCollection_Call{Call: _e.mock.On("GetDatabaseInfoForCollection", ctx, id)}
}

func (_c *MetaOp_GetDatabaseInfoForCollection_Call) Run(run func(ctx context.Context, id int64)) *MetaOp_GetDatabaseInfoForCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MetaOp_GetDatabaseInfoForCollection_Call) Return(_a0 model.DatabaseInfo) *MetaOp_GetDatabaseInfoForCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaOp_GetDatabaseInfoForCollection_Call) RunAndReturn(run func(context.Context, int64) model.DatabaseInfo) *MetaOp_GetDatabaseInfoForCollection_Call {
	_c.Call.Return(run)
	return _c
}

// StartWatch provides a mock function with given fields:
func (_m *MetaOp) StartWatch() {
	_m.Called()
}

// MetaOp_StartWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWatch'
type MetaOp_StartWatch_Call struct {
	*mock.Call
}

// StartWatch is a helper method to define mock.On call
func (_e *MetaOp_Expecter) StartWatch() *MetaOp_StartWatch_Call {
	return &MetaOp_StartWatch_Call{Call: _e.mock.On("StartWatch")}
}

func (_c *MetaOp_StartWatch_Call) Run(run func()) *MetaOp_StartWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetaOp_StartWatch_Call) Return() *MetaOp_StartWatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_StartWatch_Call) RunAndReturn(run func()) *MetaOp_StartWatch_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeCollectionEvent provides a mock function with given fields: taskID, consumer
func (_m *MetaOp) SubscribeCollectionEvent(taskID string, consumer api.CollectionEventConsumer) {
	_m.Called(taskID, consumer)
}

// MetaOp_SubscribeCollectionEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeCollectionEvent'
type MetaOp_SubscribeCollectionEvent_Call struct {
	*mock.Call
}

// SubscribeCollectionEvent is a helper method to define mock.On call
//  - taskID string
//  - consumer api.CollectionEventConsumer
func (_e *MetaOp_Expecter) SubscribeCollectionEvent(taskID interface{}, consumer interface{}) *MetaOp_SubscribeCollectionEvent_Call {
	return &MetaOp_SubscribeCollectionEvent_Call{Call: _e.mock.On("SubscribeCollectionEvent", taskID, consumer)}
}

func (_c *MetaOp_SubscribeCollectionEvent_Call) Run(run func(taskID string, consumer api.CollectionEventConsumer)) *MetaOp_SubscribeCollectionEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(api.CollectionEventConsumer))
	})
	return _c
}

func (_c *MetaOp_SubscribeCollectionEvent_Call) Return() *MetaOp_SubscribeCollectionEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_SubscribeCollectionEvent_Call) RunAndReturn(run func(string, api.CollectionEventConsumer)) *MetaOp_SubscribeCollectionEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribePartitionEvent provides a mock function with given fields: taskID, consumer
func (_m *MetaOp) SubscribePartitionEvent(taskID string, consumer api.PartitionEventConsumer) {
	_m.Called(taskID, consumer)
}

// MetaOp_SubscribePartitionEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribePartitionEvent'
type MetaOp_SubscribePartitionEvent_Call struct {
	*mock.Call
}

// SubscribePartitionEvent is a helper method to define mock.On call
//  - taskID string
//  - consumer api.PartitionEventConsumer
func (_e *MetaOp_Expecter) SubscribePartitionEvent(taskID interface{}, consumer interface{}) *MetaOp_SubscribePartitionEvent_Call {
	return &MetaOp_SubscribePartitionEvent_Call{Call: _e.mock.On("SubscribePartitionEvent", taskID, consumer)}
}

func (_c *MetaOp_SubscribePartitionEvent_Call) Run(run func(taskID string, consumer api.PartitionEventConsumer)) *MetaOp_SubscribePartitionEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(api.PartitionEventConsumer))
	})
	return _c
}

func (_c *MetaOp_SubscribePartitionEvent_Call) Return() *MetaOp_SubscribePartitionEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_SubscribePartitionEvent_Call) RunAndReturn(run func(string, api.PartitionEventConsumer)) *MetaOp_SubscribePartitionEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeEvent provides a mock function with given fields: taskID, eventType
func (_m *MetaOp) UnsubscribeEvent(taskID string, eventType api.WatchEventType) {
	_m.Called(taskID, eventType)
}

// MetaOp_UnsubscribeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeEvent'
type MetaOp_UnsubscribeEvent_Call struct {
	*mock.Call
}

// UnsubscribeEvent is a helper method to define mock.On call
//  - taskID string
//  - eventType api.WatchEventType
func (_e *MetaOp_Expecter) UnsubscribeEvent(taskID interface{}, eventType interface{}) *MetaOp_UnsubscribeEvent_Call {
	return &MetaOp_UnsubscribeEvent_Call{Call: _e.mock.On("UnsubscribeEvent", taskID, eventType)}
}

func (_c *MetaOp_UnsubscribeEvent_Call) Run(run func(taskID string, eventType api.WatchEventType)) *MetaOp_UnsubscribeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(api.WatchEventType))
	})
	return _c
}

func (_c *MetaOp_UnsubscribeEvent_Call) Return() *MetaOp_UnsubscribeEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_UnsubscribeEvent_Call) RunAndReturn(run func(string, api.WatchEventType)) *MetaOp_UnsubscribeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// WatchCollection provides a mock function with given fields: ctx, filter
func (_m *MetaOp) WatchCollection(ctx context.Context, filter api.CollectionFilter) {
	_m.Called(ctx, filter)
}

// MetaOp_WatchCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchCollection'
type MetaOp_WatchCollection_Call struct {
	*mock.Call
}

// WatchCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - filter api.CollectionFilter
func (_e *MetaOp_Expecter) WatchCollection(ctx interface{}, filter interface{}) *MetaOp_WatchCollection_Call {
	return &MetaOp_WatchCollection_Call{Call: _e.mock.On("WatchCollection", ctx, filter)}
}

func (_c *MetaOp_WatchCollection_Call) Run(run func(ctx context.Context, filter api.CollectionFilter)) *MetaOp_WatchCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.CollectionFilter))
	})
	return _c
}

func (_c *MetaOp_WatchCollection_Call) Return() *MetaOp_WatchCollection_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_WatchCollection_Call) RunAndReturn(run func(context.Context, api.CollectionFilter)) *MetaOp_WatchCollection_Call {
	_c.Call.Return(run)
	return _c
}

// WatchPartition provides a mock function with given fields: ctx, filter
func (_m *MetaOp) WatchPartition(ctx context.Context, filter api.PartitionFilter) {
	_m.Called(ctx, filter)
}

// MetaOp_WatchPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchPartition'
type MetaOp_WatchPartition_Call struct {
	*mock.Call
}

// WatchPartition is a helper method to define mock.On call
//  - ctx context.Context
//  - filter api.PartitionFilter
func (_e *MetaOp_Expecter) WatchPartition(ctx interface{}, filter interface{}) *MetaOp_WatchPartition_Call {
	return &MetaOp_WatchPartition_Call{Call: _e.mock.On("WatchPartition", ctx, filter)}
}

func (_c *MetaOp_WatchPartition_Call) Run(run func(ctx context.Context, filter api.PartitionFilter)) *MetaOp_WatchPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.PartitionFilter))
	})
	return _c
}

func (_c *MetaOp_WatchPartition_Call) Return() *MetaOp_WatchPartition_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetaOp_WatchPartition_Call) RunAndReturn(run func(context.Context, api.PartitionFilter)) *MetaOp_WatchPartition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetaOp creates a new instance of MetaOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaOp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaOp {
	mock := &MetaOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
