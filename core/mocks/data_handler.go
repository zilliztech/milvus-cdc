// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zilliztech/milvus-cdc/core/api"

	mock "github.com/stretchr/testify/mock"
)

// DataHandler is an autogenerated mock type for the DataHandler type
type DataHandler struct {
	mock.Mock
}

type DataHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *DataHandler) EXPECT() *DataHandler_Expecter {
	return &DataHandler_Expecter{mock: &_m.Mock}
}

// CreateCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateCollection(ctx context.Context, param *api.CreateCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type DataHandler_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.CreateCollectionParam
func (_e *DataHandler_Expecter) CreateCollection(ctx interface{}, param interface{}) *DataHandler_CreateCollection_Call {
	return &DataHandler_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, param)}
}

func (_c *DataHandler_CreateCollection_Call) Run(run func(ctx context.Context, param *api.CreateCollectionParam)) *DataHandler_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateCollectionParam))
	})
	return _c
}

func (_c *DataHandler_CreateCollection_Call) Return(_a0 error) *DataHandler_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateCollection_Call) RunAndReturn(run func(context.Context, *api.CreateCollectionParam) error) *DataHandler_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateDatabase(ctx context.Context, param *api.CreateDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type DataHandler_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.CreateDatabaseParam
func (_e *DataHandler_Expecter) CreateDatabase(ctx interface{}, param interface{}) *DataHandler_CreateDatabase_Call {
	return &DataHandler_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase", ctx, param)}
}

func (_c *DataHandler_CreateDatabase_Call) Run(run func(ctx context.Context, param *api.CreateDatabaseParam)) *DataHandler_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_CreateDatabase_Call) Return(_a0 error) *DataHandler_CreateDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateDatabase_Call) RunAndReturn(run func(context.Context, *api.CreateDatabaseParam) error) *DataHandler_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateIndex(ctx context.Context, param *api.CreateIndexParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateIndexParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type DataHandler_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.CreateIndexParam
func (_e *DataHandler_Expecter) CreateIndex(ctx interface{}, param interface{}) *DataHandler_CreateIndex_Call {
	return &DataHandler_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, param)}
}

func (_c *DataHandler_CreateIndex_Call) Run(run func(ctx context.Context, param *api.CreateIndexParam)) *DataHandler_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateIndexParam))
	})
	return _c
}

func (_c *DataHandler_CreateIndex_Call) Return(_a0 error) *DataHandler_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateIndex_Call) RunAndReturn(run func(context.Context, *api.CreateIndexParam) error) *DataHandler_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePartition provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreatePartition(ctx context.Context, param *api.CreatePartitionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreatePartitionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreatePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePartition'
type DataHandler_CreatePartition_Call struct {
	*mock.Call
}

// CreatePartition is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.CreatePartitionParam
func (_e *DataHandler_Expecter) CreatePartition(ctx interface{}, param interface{}) *DataHandler_CreatePartition_Call {
	return &DataHandler_CreatePartition_Call{Call: _e.mock.On("CreatePartition", ctx, param)}
}

func (_c *DataHandler_CreatePartition_Call) Run(run func(ctx context.Context, param *api.CreatePartitionParam)) *DataHandler_CreatePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreatePartitionParam))
	})
	return _c
}

func (_c *DataHandler_CreatePartition_Call) Return(_a0 error) *DataHandler_CreatePartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreatePartition_Call) RunAndReturn(run func(context.Context, *api.CreatePartitionParam) error) *DataHandler_CreatePartition_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, param
func (_m *DataHandler) Delete(ctx context.Context, param *api.DeleteParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DataHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DeleteParam
func (_e *DataHandler_Expecter) Delete(ctx interface{}, param interface{}) *DataHandler_Delete_Call {
	return &DataHandler_Delete_Call{Call: _e.mock.On("Delete", ctx, param)}
}

func (_c *DataHandler_Delete_Call) Run(run func(ctx context.Context, param *api.DeleteParam)) *DataHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DeleteParam))
	})
	return _c
}

func (_c *DataHandler_Delete_Call) Return(_a0 error) *DataHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Delete_Call) RunAndReturn(run func(context.Context, *api.DeleteParam) error) *DataHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) DescribeCollection(ctx context.Context, param *api.DescribeCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DescribeCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DescribeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeCollection'
type DataHandler_DescribeCollection_Call struct {
	*mock.Call
}

// DescribeCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DescribeCollectionParam
func (_e *DataHandler_Expecter) DescribeCollection(ctx interface{}, param interface{}) *DataHandler_DescribeCollection_Call {
	return &DataHandler_DescribeCollection_Call{Call: _e.mock.On("DescribeCollection", ctx, param)}
}

func (_c *DataHandler_DescribeCollection_Call) Run(run func(ctx context.Context, param *api.DescribeCollectionParam)) *DataHandler_DescribeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DescribeCollectionParam))
	})
	return _c
}

func (_c *DataHandler_DescribeCollection_Call) Return(_a0 error) *DataHandler_DescribeCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DescribeCollection_Call) RunAndReturn(run func(context.Context, *api.DescribeCollectionParam) error) *DataHandler_DescribeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropCollection(ctx context.Context, param *api.DropCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropCollection'
type DataHandler_DropCollection_Call struct {
	*mock.Call
}

// DropCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DropCollectionParam
func (_e *DataHandler_Expecter) DropCollection(ctx interface{}, param interface{}) *DataHandler_DropCollection_Call {
	return &DataHandler_DropCollection_Call{Call: _e.mock.On("DropCollection", ctx, param)}
}

func (_c *DataHandler_DropCollection_Call) Run(run func(ctx context.Context, param *api.DropCollectionParam)) *DataHandler_DropCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropCollectionParam))
	})
	return _c
}

func (_c *DataHandler_DropCollection_Call) Return(_a0 error) *DataHandler_DropCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropCollection_Call) RunAndReturn(run func(context.Context, *api.DropCollectionParam) error) *DataHandler_DropCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropDatabase(ctx context.Context, param *api.DropDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabase'
type DataHandler_DropDatabase_Call struct {
	*mock.Call
}

// DropDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DropDatabaseParam
func (_e *DataHandler_Expecter) DropDatabase(ctx interface{}, param interface{}) *DataHandler_DropDatabase_Call {
	return &DataHandler_DropDatabase_Call{Call: _e.mock.On("DropDatabase", ctx, param)}
}

func (_c *DataHandler_DropDatabase_Call) Run(run func(ctx context.Context, param *api.DropDatabaseParam)) *DataHandler_DropDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_DropDatabase_Call) Return(_a0 error) *DataHandler_DropDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropDatabase_Call) RunAndReturn(run func(context.Context, *api.DropDatabaseParam) error) *DataHandler_DropDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropIndex(ctx context.Context, param *api.DropIndexParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropIndexParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type DataHandler_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DropIndexParam
func (_e *DataHandler_Expecter) DropIndex(ctx interface{}, param interface{}) *DataHandler_DropIndex_Call {
	return &DataHandler_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, param)}
}

func (_c *DataHandler_DropIndex_Call) Run(run func(ctx context.Context, param *api.DropIndexParam)) *DataHandler_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropIndexParam))
	})
	return _c
}

func (_c *DataHandler_DropIndex_Call) Return(_a0 error) *DataHandler_DropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropIndex_Call) RunAndReturn(run func(context.Context, *api.DropIndexParam) error) *DataHandler_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropPartition provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropPartition(ctx context.Context, param *api.DropPartitionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropPartitionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropPartition'
type DataHandler_DropPartition_Call struct {
	*mock.Call
}

// DropPartition is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.DropPartitionParam
func (_e *DataHandler_Expecter) DropPartition(ctx interface{}, param interface{}) *DataHandler_DropPartition_Call {
	return &DataHandler_DropPartition_Call{Call: _e.mock.On("DropPartition", ctx, param)}
}

func (_c *DataHandler_DropPartition_Call) Run(run func(ctx context.Context, param *api.DropPartitionParam)) *DataHandler_DropPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropPartitionParam))
	})
	return _c
}

func (_c *DataHandler_DropPartition_Call) Return(_a0 error) *DataHandler_DropPartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropPartition_Call) RunAndReturn(run func(context.Context, *api.DropPartitionParam) error) *DataHandler_DropPartition_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx, param
func (_m *DataHandler) Flush(ctx context.Context, param *api.FlushParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.FlushParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type DataHandler_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.FlushParam
func (_e *DataHandler_Expecter) Flush(ctx interface{}, param interface{}) *DataHandler_Flush_Call {
	return &DataHandler_Flush_Call{Call: _e.mock.On("Flush", ctx, param)}
}

func (_c *DataHandler_Flush_Call) Run(run func(ctx context.Context, param *api.FlushParam)) *DataHandler_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.FlushParam))
	})
	return _c
}

func (_c *DataHandler_Flush_Call) Return(_a0 error) *DataHandler_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Flush_Call) RunAndReturn(run func(context.Context, *api.FlushParam) error) *DataHandler_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, param
func (_m *DataHandler) Insert(ctx context.Context, param *api.InsertParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.InsertParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type DataHandler_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.InsertParam
func (_e *DataHandler_Expecter) Insert(ctx interface{}, param interface{}) *DataHandler_Insert_Call {
	return &DataHandler_Insert_Call{Call: _e.mock.On("Insert", ctx, param)}
}

func (_c *DataHandler_Insert_Call) Run(run func(ctx context.Context, param *api.InsertParam)) *DataHandler_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.InsertParam))
	})
	return _c
}

func (_c *DataHandler_Insert_Call) Return(_a0 error) *DataHandler_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Insert_Call) RunAndReturn(run func(context.Context, *api.InsertParam) error) *DataHandler_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) LoadCollection(ctx context.Context, param *api.LoadCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.LoadCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_LoadCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCollection'
type DataHandler_LoadCollection_Call struct {
	*mock.Call
}

// LoadCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.LoadCollectionParam
func (_e *DataHandler_Expecter) LoadCollection(ctx interface{}, param interface{}) *DataHandler_LoadCollection_Call {
	return &DataHandler_LoadCollection_Call{Call: _e.mock.On("LoadCollection", ctx, param)}
}

func (_c *DataHandler_LoadCollection_Call) Run(run func(ctx context.Context, param *api.LoadCollectionParam)) *DataHandler_LoadCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.LoadCollectionParam))
	})
	return _c
}

func (_c *DataHandler_LoadCollection_Call) Return(_a0 error) *DataHandler_LoadCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_LoadCollection_Call) RunAndReturn(run func(context.Context, *api.LoadCollectionParam) error) *DataHandler_LoadCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) ReleaseCollection(ctx context.Context, param *api.ReleaseCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReleaseCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_ReleaseCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseCollection'
type DataHandler_ReleaseCollection_Call struct {
	*mock.Call
}

// ReleaseCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.ReleaseCollectionParam
func (_e *DataHandler_Expecter) ReleaseCollection(ctx interface{}, param interface{}) *DataHandler_ReleaseCollection_Call {
	return &DataHandler_ReleaseCollection_Call{Call: _e.mock.On("ReleaseCollection", ctx, param)}
}

func (_c *DataHandler_ReleaseCollection_Call) Run(run func(ctx context.Context, param *api.ReleaseCollectionParam)) *DataHandler_ReleaseCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReleaseCollectionParam))
	})
	return _c
}

func (_c *DataHandler_ReleaseCollection_Call) Return(_a0 error) *DataHandler_ReleaseCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_ReleaseCollection_Call) RunAndReturn(run func(context.Context, *api.ReleaseCollectionParam) error) *DataHandler_ReleaseCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateMessage provides a mock function with given fields: ctx, param
func (_m *DataHandler) ReplicateMessage(ctx context.Context, param *api.ReplicateMessageParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReplicateMessageParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_ReplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateMessage'
type DataHandler_ReplicateMessage_Call struct {
	*mock.Call
}

// ReplicateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - param *api.ReplicateMessageParam
func (_e *DataHandler_Expecter) ReplicateMessage(ctx interface{}, param interface{}) *DataHandler_ReplicateMessage_Call {
	return &DataHandler_ReplicateMessage_Call{Call: _e.mock.On("ReplicateMessage", ctx, param)}
}

func (_c *DataHandler_ReplicateMessage_Call) Run(run func(ctx context.Context, param *api.ReplicateMessageParam)) *DataHandler_ReplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReplicateMessageParam))
	})
	return _c
}

func (_c *DataHandler_ReplicateMessage_Call) Return(_a0 error) *DataHandler_ReplicateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_ReplicateMessage_Call) RunAndReturn(run func(context.Context, *api.ReplicateMessageParam) error) *DataHandler_ReplicateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataHandler creates a new instance of DataHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHandler {
	mock := &DataHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
