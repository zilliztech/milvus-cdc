// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zilliztech/milvus-cdc/core/api"

	mock "github.com/stretchr/testify/mock"
)

// DataHandler is an autogenerated mock type for the DataHandler type
type DataHandler struct {
	mock.Mock
}

type DataHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *DataHandler) EXPECT() *DataHandler_Expecter {
	return &DataHandler_Expecter{mock: &_m.Mock}
}

// AlterDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) AlterDatabase(ctx context.Context, param *api.AlterDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.AlterDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_AlterDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlterDatabase'
type DataHandler_AlterDatabase_Call struct {
	*mock.Call
}

// AlterDatabase is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.AlterDatabaseParam
func (_e *DataHandler_Expecter) AlterDatabase(ctx interface{}, param interface{}) *DataHandler_AlterDatabase_Call {
	return &DataHandler_AlterDatabase_Call{Call: _e.mock.On("AlterDatabase", ctx, param)}
}

func (_c *DataHandler_AlterDatabase_Call) Run(run func(ctx context.Context, param *api.AlterDatabaseParam)) *DataHandler_AlterDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.AlterDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_AlterDatabase_Call) Return(_a0 error) *DataHandler_AlterDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_AlterDatabase_Call) RunAndReturn(run func(context.Context, *api.AlterDatabaseParam) error) *DataHandler_AlterDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// AlterIndex provides a mock function with given fields: ctx, param
func (_m *DataHandler) AlterIndex(ctx context.Context, param *api.AlterIndexParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.AlterIndexParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_AlterIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlterIndex'
type DataHandler_AlterIndex_Call struct {
	*mock.Call
}

// AlterIndex is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.AlterIndexParam
func (_e *DataHandler_Expecter) AlterIndex(ctx interface{}, param interface{}) *DataHandler_AlterIndex_Call {
	return &DataHandler_AlterIndex_Call{Call: _e.mock.On("AlterIndex", ctx, param)}
}

func (_c *DataHandler_AlterIndex_Call) Run(run func(ctx context.Context, param *api.AlterIndexParam)) *DataHandler_AlterIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.AlterIndexParam))
	})
	return _c
}

func (_c *DataHandler_AlterIndex_Call) Return(_a0 error) *DataHandler_AlterIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_AlterIndex_Call) RunAndReturn(run func(context.Context, *api.AlterIndexParam) error) *DataHandler_AlterIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateCollection(ctx context.Context, param *api.CreateCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type DataHandler_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreateCollectionParam
func (_e *DataHandler_Expecter) CreateCollection(ctx interface{}, param interface{}) *DataHandler_CreateCollection_Call {
	return &DataHandler_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, param)}
}

func (_c *DataHandler_CreateCollection_Call) Run(run func(ctx context.Context, param *api.CreateCollectionParam)) *DataHandler_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateCollectionParam))
	})
	return _c
}

func (_c *DataHandler_CreateCollection_Call) Return(_a0 error) *DataHandler_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateCollection_Call) RunAndReturn(run func(context.Context, *api.CreateCollectionParam) error) *DataHandler_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateDatabase(ctx context.Context, param *api.CreateDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type DataHandler_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreateDatabaseParam
func (_e *DataHandler_Expecter) CreateDatabase(ctx interface{}, param interface{}) *DataHandler_CreateDatabase_Call {
	return &DataHandler_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase", ctx, param)}
}

func (_c *DataHandler_CreateDatabase_Call) Run(run func(ctx context.Context, param *api.CreateDatabaseParam)) *DataHandler_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_CreateDatabase_Call) Return(_a0 error) *DataHandler_CreateDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateDatabase_Call) RunAndReturn(run func(context.Context, *api.CreateDatabaseParam) error) *DataHandler_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateIndex(ctx context.Context, param *api.CreateIndexParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateIndexParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type DataHandler_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreateIndexParam
func (_e *DataHandler_Expecter) CreateIndex(ctx interface{}, param interface{}) *DataHandler_CreateIndex_Call {
	return &DataHandler_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, param)}
}

func (_c *DataHandler_CreateIndex_Call) Run(run func(ctx context.Context, param *api.CreateIndexParam)) *DataHandler_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateIndexParam))
	})
	return _c
}

func (_c *DataHandler_CreateIndex_Call) Return(_a0 error) *DataHandler_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateIndex_Call) RunAndReturn(run func(context.Context, *api.CreateIndexParam) error) *DataHandler_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePartition provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreatePartition(ctx context.Context, param *api.CreatePartitionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreatePartitionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreatePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePartition'
type DataHandler_CreatePartition_Call struct {
	*mock.Call
}

// CreatePartition is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreatePartitionParam
func (_e *DataHandler_Expecter) CreatePartition(ctx interface{}, param interface{}) *DataHandler_CreatePartition_Call {
	return &DataHandler_CreatePartition_Call{Call: _e.mock.On("CreatePartition", ctx, param)}
}

func (_c *DataHandler_CreatePartition_Call) Run(run func(ctx context.Context, param *api.CreatePartitionParam)) *DataHandler_CreatePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreatePartitionParam))
	})
	return _c
}

func (_c *DataHandler_CreatePartition_Call) Return(_a0 error) *DataHandler_CreatePartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreatePartition_Call) RunAndReturn(run func(context.Context, *api.CreatePartitionParam) error) *DataHandler_CreatePartition_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateRole(ctx context.Context, param *api.CreateRoleParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateRoleParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type DataHandler_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreateRoleParam
func (_e *DataHandler_Expecter) CreateRole(ctx interface{}, param interface{}) *DataHandler_CreateRole_Call {
	return &DataHandler_CreateRole_Call{Call: _e.mock.On("CreateRole", ctx, param)}
}

func (_c *DataHandler_CreateRole_Call) Run(run func(ctx context.Context, param *api.CreateRoleParam)) *DataHandler_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateRoleParam))
	})
	return _c
}

func (_c *DataHandler_CreateRole_Call) Return(_a0 error) *DataHandler_CreateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateRole_Call) RunAndReturn(run func(context.Context, *api.CreateRoleParam) error) *DataHandler_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, param
func (_m *DataHandler) CreateUser(ctx context.Context, param *api.CreateUserParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateUserParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type DataHandler_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.CreateUserParam
func (_e *DataHandler_Expecter) CreateUser(ctx interface{}, param interface{}) *DataHandler_CreateUser_Call {
	return &DataHandler_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, param)}
}

func (_c *DataHandler_CreateUser_Call) Run(run func(ctx context.Context, param *api.CreateUserParam)) *DataHandler_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.CreateUserParam))
	})
	return _c
}

func (_c *DataHandler_CreateUser_Call) Return(_a0 error) *DataHandler_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_CreateUser_Call) RunAndReturn(run func(context.Context, *api.CreateUserParam) error) *DataHandler_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, param
func (_m *DataHandler) Delete(ctx context.Context, param *api.DeleteParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DataHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DeleteParam
func (_e *DataHandler_Expecter) Delete(ctx interface{}, param interface{}) *DataHandler_Delete_Call {
	return &DataHandler_Delete_Call{Call: _e.mock.On("Delete", ctx, param)}
}

func (_c *DataHandler_Delete_Call) Run(run func(ctx context.Context, param *api.DeleteParam)) *DataHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DeleteParam))
	})
	return _c
}

func (_c *DataHandler_Delete_Call) Return(_a0 error) *DataHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Delete_Call) RunAndReturn(run func(context.Context, *api.DeleteParam) error) *DataHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, param
func (_m *DataHandler) DeleteUser(ctx context.Context, param *api.DeleteUserParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteUserParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type DataHandler_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DeleteUserParam
func (_e *DataHandler_Expecter) DeleteUser(ctx interface{}, param interface{}) *DataHandler_DeleteUser_Call {
	return &DataHandler_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, param)}
}

func (_c *DataHandler_DeleteUser_Call) Run(run func(ctx context.Context, param *api.DeleteUserParam)) *DataHandler_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DeleteUserParam))
	})
	return _c
}

func (_c *DataHandler_DeleteUser_Call) Return(_a0 error) *DataHandler_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DeleteUser_Call) RunAndReturn(run func(context.Context, *api.DeleteUserParam) error) *DataHandler_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) DescribeCollection(ctx context.Context, param *api.DescribeCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DescribeCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DescribeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeCollection'
type DataHandler_DescribeCollection_Call struct {
	*mock.Call
}

// DescribeCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DescribeCollectionParam
func (_e *DataHandler_Expecter) DescribeCollection(ctx interface{}, param interface{}) *DataHandler_DescribeCollection_Call {
	return &DataHandler_DescribeCollection_Call{Call: _e.mock.On("DescribeCollection", ctx, param)}
}

func (_c *DataHandler_DescribeCollection_Call) Run(run func(ctx context.Context, param *api.DescribeCollectionParam)) *DataHandler_DescribeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DescribeCollectionParam))
	})
	return _c
}

func (_c *DataHandler_DescribeCollection_Call) Return(_a0 error) *DataHandler_DescribeCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DescribeCollection_Call) RunAndReturn(run func(context.Context, *api.DescribeCollectionParam) error) *DataHandler_DescribeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) DescribeDatabase(ctx context.Context, param *api.DescribeDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DescribeDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DescribeDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDatabase'
type DataHandler_DescribeDatabase_Call struct {
	*mock.Call
}

// DescribeDatabase is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DescribeDatabaseParam
func (_e *DataHandler_Expecter) DescribeDatabase(ctx interface{}, param interface{}) *DataHandler_DescribeDatabase_Call {
	return &DataHandler_DescribeDatabase_Call{Call: _e.mock.On("DescribeDatabase", ctx, param)}
}

func (_c *DataHandler_DescribeDatabase_Call) Run(run func(ctx context.Context, param *api.DescribeDatabaseParam)) *DataHandler_DescribeDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DescribeDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_DescribeDatabase_Call) Return(_a0 error) *DataHandler_DescribeDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DescribeDatabase_Call) RunAndReturn(run func(context.Context, *api.DescribeDatabaseParam) error) *DataHandler_DescribeDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DescribePartition provides a mock function with given fields: ctx, param
func (_m *DataHandler) DescribePartition(ctx context.Context, param *api.DescribePartitionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DescribePartitionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DescribePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribePartition'
type DataHandler_DescribePartition_Call struct {
	*mock.Call
}

// DescribePartition is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DescribePartitionParam
func (_e *DataHandler_Expecter) DescribePartition(ctx interface{}, param interface{}) *DataHandler_DescribePartition_Call {
	return &DataHandler_DescribePartition_Call{Call: _e.mock.On("DescribePartition", ctx, param)}
}

func (_c *DataHandler_DescribePartition_Call) Run(run func(ctx context.Context, param *api.DescribePartitionParam)) *DataHandler_DescribePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DescribePartitionParam))
	})
	return _c
}

func (_c *DataHandler_DescribePartition_Call) Return(_a0 error) *DataHandler_DescribePartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DescribePartition_Call) RunAndReturn(run func(context.Context, *api.DescribePartitionParam) error) *DataHandler_DescribePartition_Call {
	_c.Call.Return(run)
	return _c
}

// DropCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropCollection(ctx context.Context, param *api.DropCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropCollection'
type DataHandler_DropCollection_Call struct {
	*mock.Call
}

// DropCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DropCollectionParam
func (_e *DataHandler_Expecter) DropCollection(ctx interface{}, param interface{}) *DataHandler_DropCollection_Call {
	return &DataHandler_DropCollection_Call{Call: _e.mock.On("DropCollection", ctx, param)}
}

func (_c *DataHandler_DropCollection_Call) Run(run func(ctx context.Context, param *api.DropCollectionParam)) *DataHandler_DropCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropCollectionParam))
	})
	return _c
}

func (_c *DataHandler_DropCollection_Call) Return(_a0 error) *DataHandler_DropCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropCollection_Call) RunAndReturn(run func(context.Context, *api.DropCollectionParam) error) *DataHandler_DropCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabase provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropDatabase(ctx context.Context, param *api.DropDatabaseParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropDatabaseParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabase'
type DataHandler_DropDatabase_Call struct {
	*mock.Call
}

// DropDatabase is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DropDatabaseParam
func (_e *DataHandler_Expecter) DropDatabase(ctx interface{}, param interface{}) *DataHandler_DropDatabase_Call {
	return &DataHandler_DropDatabase_Call{Call: _e.mock.On("DropDatabase", ctx, param)}
}

func (_c *DataHandler_DropDatabase_Call) Run(run func(ctx context.Context, param *api.DropDatabaseParam)) *DataHandler_DropDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropDatabaseParam))
	})
	return _c
}

func (_c *DataHandler_DropDatabase_Call) Return(_a0 error) *DataHandler_DropDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropDatabase_Call) RunAndReturn(run func(context.Context, *api.DropDatabaseParam) error) *DataHandler_DropDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropIndex(ctx context.Context, param *api.DropIndexParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropIndexParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type DataHandler_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DropIndexParam
func (_e *DataHandler_Expecter) DropIndex(ctx interface{}, param interface{}) *DataHandler_DropIndex_Call {
	return &DataHandler_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, param)}
}

func (_c *DataHandler_DropIndex_Call) Run(run func(ctx context.Context, param *api.DropIndexParam)) *DataHandler_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropIndexParam))
	})
	return _c
}

func (_c *DataHandler_DropIndex_Call) Return(_a0 error) *DataHandler_DropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropIndex_Call) RunAndReturn(run func(context.Context, *api.DropIndexParam) error) *DataHandler_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropPartition provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropPartition(ctx context.Context, param *api.DropPartitionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropPartitionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropPartition'
type DataHandler_DropPartition_Call struct {
	*mock.Call
}

// DropPartition is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DropPartitionParam
func (_e *DataHandler_Expecter) DropPartition(ctx interface{}, param interface{}) *DataHandler_DropPartition_Call {
	return &DataHandler_DropPartition_Call{Call: _e.mock.On("DropPartition", ctx, param)}
}

func (_c *DataHandler_DropPartition_Call) Run(run func(ctx context.Context, param *api.DropPartitionParam)) *DataHandler_DropPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropPartitionParam))
	})
	return _c
}

func (_c *DataHandler_DropPartition_Call) Return(_a0 error) *DataHandler_DropPartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropPartition_Call) RunAndReturn(run func(context.Context, *api.DropPartitionParam) error) *DataHandler_DropPartition_Call {
	_c.Call.Return(run)
	return _c
}

// DropRole provides a mock function with given fields: ctx, param
func (_m *DataHandler) DropRole(ctx context.Context, param *api.DropRoleParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DropRoleParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_DropRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropRole'
type DataHandler_DropRole_Call struct {
	*mock.Call
}

// DropRole is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.DropRoleParam
func (_e *DataHandler_Expecter) DropRole(ctx interface{}, param interface{}) *DataHandler_DropRole_Call {
	return &DataHandler_DropRole_Call{Call: _e.mock.On("DropRole", ctx, param)}
}

func (_c *DataHandler_DropRole_Call) Run(run func(ctx context.Context, param *api.DropRoleParam)) *DataHandler_DropRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.DropRoleParam))
	})
	return _c
}

func (_c *DataHandler_DropRole_Call) Return(_a0 error) *DataHandler_DropRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_DropRole_Call) RunAndReturn(run func(context.Context, *api.DropRoleParam) error) *DataHandler_DropRole_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx, param
func (_m *DataHandler) Flush(ctx context.Context, param *api.FlushParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.FlushParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type DataHandler_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.FlushParam
func (_e *DataHandler_Expecter) Flush(ctx interface{}, param interface{}) *DataHandler_Flush_Call {
	return &DataHandler_Flush_Call{Call: _e.mock.On("Flush", ctx, param)}
}

func (_c *DataHandler_Flush_Call) Run(run func(ctx context.Context, param *api.FlushParam)) *DataHandler_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.FlushParam))
	})
	return _c
}

func (_c *DataHandler_Flush_Call) Return(_a0 error) *DataHandler_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Flush_Call) RunAndReturn(run func(context.Context, *api.FlushParam) error) *DataHandler_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, param
func (_m *DataHandler) Insert(ctx context.Context, param *api.InsertParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.InsertParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type DataHandler_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.InsertParam
func (_e *DataHandler_Expecter) Insert(ctx interface{}, param interface{}) *DataHandler_Insert_Call {
	return &DataHandler_Insert_Call{Call: _e.mock.On("Insert", ctx, param)}
}

func (_c *DataHandler_Insert_Call) Run(run func(ctx context.Context, param *api.InsertParam)) *DataHandler_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.InsertParam))
	})
	return _c
}

func (_c *DataHandler_Insert_Call) Return(_a0 error) *DataHandler_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_Insert_Call) RunAndReturn(run func(context.Context, *api.InsertParam) error) *DataHandler_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) LoadCollection(ctx context.Context, param *api.LoadCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.LoadCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_LoadCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCollection'
type DataHandler_LoadCollection_Call struct {
	*mock.Call
}

// LoadCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.LoadCollectionParam
func (_e *DataHandler_Expecter) LoadCollection(ctx interface{}, param interface{}) *DataHandler_LoadCollection_Call {
	return &DataHandler_LoadCollection_Call{Call: _e.mock.On("LoadCollection", ctx, param)}
}

func (_c *DataHandler_LoadCollection_Call) Run(run func(ctx context.Context, param *api.LoadCollectionParam)) *DataHandler_LoadCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.LoadCollectionParam))
	})
	return _c
}

func (_c *DataHandler_LoadCollection_Call) Return(_a0 error) *DataHandler_LoadCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_LoadCollection_Call) RunAndReturn(run func(context.Context, *api.LoadCollectionParam) error) *DataHandler_LoadCollection_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPartitions provides a mock function with given fields: ctx, param
func (_m *DataHandler) LoadPartitions(ctx context.Context, param *api.LoadPartitionsParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.LoadPartitionsParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_LoadPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPartitions'
type DataHandler_LoadPartitions_Call struct {
	*mock.Call
}

// LoadPartitions is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.LoadPartitionsParam
func (_e *DataHandler_Expecter) LoadPartitions(ctx interface{}, param interface{}) *DataHandler_LoadPartitions_Call {
	return &DataHandler_LoadPartitions_Call{Call: _e.mock.On("LoadPartitions", ctx, param)}
}

func (_c *DataHandler_LoadPartitions_Call) Run(run func(ctx context.Context, param *api.LoadPartitionsParam)) *DataHandler_LoadPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.LoadPartitionsParam))
	})
	return _c
}

func (_c *DataHandler_LoadPartitions_Call) Return(_a0 error) *DataHandler_LoadPartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_LoadPartitions_Call) RunAndReturn(run func(context.Context, *api.LoadPartitionsParam) error) *DataHandler_LoadPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// OperatePrivilege provides a mock function with given fields: ctx, param
func (_m *DataHandler) OperatePrivilege(ctx context.Context, param *api.OperatePrivilegeParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.OperatePrivilegeParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_OperatePrivilege_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperatePrivilege'
type DataHandler_OperatePrivilege_Call struct {
	*mock.Call
}

// OperatePrivilege is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.OperatePrivilegeParam
func (_e *DataHandler_Expecter) OperatePrivilege(ctx interface{}, param interface{}) *DataHandler_OperatePrivilege_Call {
	return &DataHandler_OperatePrivilege_Call{Call: _e.mock.On("OperatePrivilege", ctx, param)}
}

func (_c *DataHandler_OperatePrivilege_Call) Run(run func(ctx context.Context, param *api.OperatePrivilegeParam)) *DataHandler_OperatePrivilege_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.OperatePrivilegeParam))
	})
	return _c
}

func (_c *DataHandler_OperatePrivilege_Call) Return(_a0 error) *DataHandler_OperatePrivilege_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_OperatePrivilege_Call) RunAndReturn(run func(context.Context, *api.OperatePrivilegeParam) error) *DataHandler_OperatePrivilege_Call {
	_c.Call.Return(run)
	return _c
}

// OperateUserRole provides a mock function with given fields: ctx, param
func (_m *DataHandler) OperateUserRole(ctx context.Context, param *api.OperateUserRoleParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.OperateUserRoleParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_OperateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperateUserRole'
type DataHandler_OperateUserRole_Call struct {
	*mock.Call
}

// OperateUserRole is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.OperateUserRoleParam
func (_e *DataHandler_Expecter) OperateUserRole(ctx interface{}, param interface{}) *DataHandler_OperateUserRole_Call {
	return &DataHandler_OperateUserRole_Call{Call: _e.mock.On("OperateUserRole", ctx, param)}
}

func (_c *DataHandler_OperateUserRole_Call) Run(run func(ctx context.Context, param *api.OperateUserRoleParam)) *DataHandler_OperateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.OperateUserRoleParam))
	})
	return _c
}

func (_c *DataHandler_OperateUserRole_Call) Return(_a0 error) *DataHandler_OperateUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_OperateUserRole_Call) RunAndReturn(run func(context.Context, *api.OperateUserRoleParam) error) *DataHandler_OperateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseCollection provides a mock function with given fields: ctx, param
func (_m *DataHandler) ReleaseCollection(ctx context.Context, param *api.ReleaseCollectionParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReleaseCollectionParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_ReleaseCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseCollection'
type DataHandler_ReleaseCollection_Call struct {
	*mock.Call
}

// ReleaseCollection is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.ReleaseCollectionParam
func (_e *DataHandler_Expecter) ReleaseCollection(ctx interface{}, param interface{}) *DataHandler_ReleaseCollection_Call {
	return &DataHandler_ReleaseCollection_Call{Call: _e.mock.On("ReleaseCollection", ctx, param)}
}

func (_c *DataHandler_ReleaseCollection_Call) Run(run func(ctx context.Context, param *api.ReleaseCollectionParam)) *DataHandler_ReleaseCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReleaseCollectionParam))
	})
	return _c
}

func (_c *DataHandler_ReleaseCollection_Call) Return(_a0 error) *DataHandler_ReleaseCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_ReleaseCollection_Call) RunAndReturn(run func(context.Context, *api.ReleaseCollectionParam) error) *DataHandler_ReleaseCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ReleasePartitions provides a mock function with given fields: ctx, param
func (_m *DataHandler) ReleasePartitions(ctx context.Context, param *api.ReleasePartitionsParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReleasePartitionsParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_ReleasePartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleasePartitions'
type DataHandler_ReleasePartitions_Call struct {
	*mock.Call
}

// ReleasePartitions is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.ReleasePartitionsParam
func (_e *DataHandler_Expecter) ReleasePartitions(ctx interface{}, param interface{}) *DataHandler_ReleasePartitions_Call {
	return &DataHandler_ReleasePartitions_Call{Call: _e.mock.On("ReleasePartitions", ctx, param)}
}

func (_c *DataHandler_ReleasePartitions_Call) Run(run func(ctx context.Context, param *api.ReleasePartitionsParam)) *DataHandler_ReleasePartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReleasePartitionsParam))
	})
	return _c
}

func (_c *DataHandler_ReleasePartitions_Call) Return(_a0 error) *DataHandler_ReleasePartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_ReleasePartitions_Call) RunAndReturn(run func(context.Context, *api.ReleasePartitionsParam) error) *DataHandler_ReleasePartitions_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateMessage provides a mock function with given fields: ctx, param
func (_m *DataHandler) ReplicateMessage(ctx context.Context, param *api.ReplicateMessageParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ReplicateMessageParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_ReplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateMessage'
type DataHandler_ReplicateMessage_Call struct {
	*mock.Call
}

// ReplicateMessage is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.ReplicateMessageParam
func (_e *DataHandler_Expecter) ReplicateMessage(ctx interface{}, param interface{}) *DataHandler_ReplicateMessage_Call {
	return &DataHandler_ReplicateMessage_Call{Call: _e.mock.On("ReplicateMessage", ctx, param)}
}

func (_c *DataHandler_ReplicateMessage_Call) Run(run func(ctx context.Context, param *api.ReplicateMessageParam)) *DataHandler_ReplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.ReplicateMessageParam))
	})
	return _c
}

func (_c *DataHandler_ReplicateMessage_Call) Return(_a0 error) *DataHandler_ReplicateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_ReplicateMessage_Call) RunAndReturn(run func(context.Context, *api.ReplicateMessageParam) error) *DataHandler_ReplicateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, param
func (_m *DataHandler) UpdateUser(ctx context.Context, param *api.UpdateUserParam) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.UpdateUserParam) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataHandler_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type DataHandler_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - param *api.UpdateUserParam
func (_e *DataHandler_Expecter) UpdateUser(ctx interface{}, param interface{}) *DataHandler_UpdateUser_Call {
	return &DataHandler_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, param)}
}

func (_c *DataHandler_UpdateUser_Call) Run(run func(ctx context.Context, param *api.UpdateUserParam)) *DataHandler_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.UpdateUserParam))
	})
	return _c
}

func (_c *DataHandler_UpdateUser_Call) Return(_a0 error) *DataHandler_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataHandler_UpdateUser_Call) RunAndReturn(run func(context.Context, *api.UpdateUserParam) error) *DataHandler_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataHandler creates a new instance of DataHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHandler {
	mock := &DataHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
