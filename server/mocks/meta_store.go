// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MetaStore is an autogenerated mock type for the MetaStore type
type MetaStore[M interface{}] struct {
	mock.Mock
}

type MetaStore_Expecter[M interface{}] struct {
	mock *mock.Mock
}

func (_m *MetaStore[M]) EXPECT() *MetaStore_Expecter[M] {
	return &MetaStore_Expecter[M]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Delete(ctx context.Context, metaObj M, txn interface{}) error {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) error); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetaStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MetaStore_Delete_Call[M interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - metaObj M
//  - txn interface{}
func (_e *MetaStore_Expecter[M]) Delete(ctx interface{}, metaObj interface{}, txn interface{}) *MetaStore_Delete_Call[M] {
	return &MetaStore_Delete_Call[M]{Call: _e.mock.On("Delete", ctx, metaObj, txn)}
}

func (_c *MetaStore_Delete_Call[M]) Run(run func(ctx context.Context, metaObj M, txn interface{})) *MetaStore_Delete_Call[M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M), args[2].(interface{}))
	})
	return _c
}

func (_c *MetaStore_Delete_Call[M]) Return(_a0 error) *MetaStore_Delete_Call[M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaStore_Delete_Call[M]) RunAndReturn(run func(context.Context, M, interface{}) error) *MetaStore_Delete_Call[M] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Get(ctx context.Context, metaObj M, txn interface{}) ([]M, error) {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 []M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) ([]M, error)); ok {
		return rf(ctx, metaObj, txn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) []M); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, M, interface{}) error); ok {
		r1 = rf(ctx, metaObj, txn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetaStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MetaStore_Get_Call[M interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - metaObj M
//  - txn interface{}
func (_e *MetaStore_Expecter[M]) Get(ctx interface{}, metaObj interface{}, txn interface{}) *MetaStore_Get_Call[M] {
	return &MetaStore_Get_Call[M]{Call: _e.mock.On("Get", ctx, metaObj, txn)}
}

func (_c *MetaStore_Get_Call[M]) Run(run func(ctx context.Context, metaObj M, txn interface{})) *MetaStore_Get_Call[M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M), args[2].(interface{}))
	})
	return _c
}

func (_c *MetaStore_Get_Call[M]) Return(_a0 []M, _a1 error) *MetaStore_Get_Call[M] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetaStore_Get_Call[M]) RunAndReturn(run func(context.Context, M, interface{}) ([]M, error)) *MetaStore_Get_Call[M] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, metaObj, txn
func (_m *MetaStore[M]) Put(ctx context.Context, metaObj M, txn interface{}) error {
	ret := _m.Called(ctx, metaObj, txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, M, interface{}) error); ok {
		r0 = rf(ctx, metaObj, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetaStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MetaStore_Put_Call[M interface{}] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - ctx context.Context
//  - metaObj M
//  - txn interface{}
func (_e *MetaStore_Expecter[M]) Put(ctx interface{}, metaObj interface{}, txn interface{}) *MetaStore_Put_Call[M] {
	return &MetaStore_Put_Call[M]{Call: _e.mock.On("Put", ctx, metaObj, txn)}
}

func (_c *MetaStore_Put_Call[M]) Run(run func(ctx context.Context, metaObj M, txn interface{})) *MetaStore_Put_Call[M] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(M), args[2].(interface{}))
	})
	return _c
}

func (_c *MetaStore_Put_Call[M]) Return(_a0 error) *MetaStore_Put_Call[M] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaStore_Put_Call[M]) RunAndReturn(run func(context.Context, M, interface{}) error) *MetaStore_Put_Call[M] {
	_c.Call.Return(run)
	return _c
}

// NewMetaStore creates a new instance of MetaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaStore[M interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaStore[M] {
	mock := &MetaStore[M]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
