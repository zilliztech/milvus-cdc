// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/zilliztech/milvus-cdc/server/api"

	meta "github.com/zilliztech/milvus-cdc/server/model/meta"

	mock "github.com/stretchr/testify/mock"
)

// MetaStoreFactory is an autogenerated mock type for the MetaStoreFactory type
type MetaStoreFactory struct {
	mock.Mock
}

type MetaStoreFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MetaStoreFactory) EXPECT() *MetaStoreFactory_Expecter {
	return &MetaStoreFactory_Expecter{mock: &_m.Mock}
}

// GetTaskCollectionPositionMetaStore provides a mock function with given fields: ctx
func (_m *MetaStoreFactory) GetTaskCollectionPositionMetaStore(ctx context.Context) api.MetaStore[*meta.TaskCollectionPosition] {
	ret := _m.Called(ctx)

	var r0 api.MetaStore[*meta.TaskCollectionPosition]
	if rf, ok := ret.Get(0).(func(context.Context) api.MetaStore[*meta.TaskCollectionPosition]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.MetaStore[*meta.TaskCollectionPosition])
		}
	}

	return r0
}

// MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskCollectionPositionMetaStore'
type MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call struct {
	*mock.Call
}

// GetTaskCollectionPositionMetaStore is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MetaStoreFactory_Expecter) GetTaskCollectionPositionMetaStore(ctx interface{}) *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call {
	return &MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call{Call: _e.mock.On("GetTaskCollectionPositionMetaStore", ctx)}
}

func (_c *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call) Run(run func(ctx context.Context)) *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call) Return(_a0 api.MetaStore[*meta.TaskCollectionPosition]) *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call) RunAndReturn(run func(context.Context) api.MetaStore[*meta.TaskCollectionPosition]) *MetaStoreFactory_GetTaskCollectionPositionMetaStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskInfoMetaStore provides a mock function with given fields: ctx
func (_m *MetaStoreFactory) GetTaskInfoMetaStore(ctx context.Context) api.MetaStore[*meta.TaskInfo] {
	ret := _m.Called(ctx)

	var r0 api.MetaStore[*meta.TaskInfo]
	if rf, ok := ret.Get(0).(func(context.Context) api.MetaStore[*meta.TaskInfo]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.MetaStore[*meta.TaskInfo])
		}
	}

	return r0
}

// MetaStoreFactory_GetTaskInfoMetaStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskInfoMetaStore'
type MetaStoreFactory_GetTaskInfoMetaStore_Call struct {
	*mock.Call
}

// GetTaskInfoMetaStore is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MetaStoreFactory_Expecter) GetTaskInfoMetaStore(ctx interface{}) *MetaStoreFactory_GetTaskInfoMetaStore_Call {
	return &MetaStoreFactory_GetTaskInfoMetaStore_Call{Call: _e.mock.On("GetTaskInfoMetaStore", ctx)}
}

func (_c *MetaStoreFactory_GetTaskInfoMetaStore_Call) Run(run func(ctx context.Context)) *MetaStoreFactory_GetTaskInfoMetaStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetaStoreFactory_GetTaskInfoMetaStore_Call) Return(_a0 api.MetaStore[*meta.TaskInfo]) *MetaStoreFactory_GetTaskInfoMetaStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetaStoreFactory_GetTaskInfoMetaStore_Call) RunAndReturn(run func(context.Context) api.MetaStore[*meta.TaskInfo]) *MetaStoreFactory_GetTaskInfoMetaStore_Call {
	_c.Call.Return(run)
	return _c
}

// Txn provides a mock function with given fields: ctx
func (_m *MetaStoreFactory) Txn(ctx context.Context) (interface{}, func(error) error, error) {
	ret := _m.Called(ctx)

	var r0 interface{}
	var r1 func(error) error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (interface{}, func(error) error, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) func(error) error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func(error) error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MetaStoreFactory_Txn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Txn'
type MetaStoreFactory_Txn_Call struct {
	*mock.Call
}

// Txn is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MetaStoreFactory_Expecter) Txn(ctx interface{}) *MetaStoreFactory_Txn_Call {
	return &MetaStoreFactory_Txn_Call{Call: _e.mock.On("Txn", ctx)}
}

func (_c *MetaStoreFactory_Txn_Call) Run(run func(ctx context.Context)) *MetaStoreFactory_Txn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetaStoreFactory_Txn_Call) Return(_a0 interface{}, _a1 func(error) error, _a2 error) *MetaStoreFactory_Txn_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MetaStoreFactory_Txn_Call) RunAndReturn(run func(context.Context) (interface{}, func(error) error, error)) *MetaStoreFactory_Txn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetaStoreFactory creates a new instance of MetaStoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetaStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetaStoreFactory {
	mock := &MetaStoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
